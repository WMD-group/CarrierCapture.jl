#!/usr/bin/env julia

push!(LOAD_PATH,"../src/")
module GetRate
using CaptureRate
using Plotter
using ArgParse, YAML
using CSV, DataFrames # consider CSVFiles
# using JLD2, FileIO
using Serialization
using Potential, LsqFit # to load potentials from a serialized file generated by GetPotential.jl

# read arguments and input file
s = ArgParseSettings()
@add_arg_table s begin
    "--input", "-i"
        help = "input file in a yaml format"
        default = "input.yaml"
        arg_type = String
    "--potential", "-p"
        help = "potential file serialized"
        default = "potential.jld"
        arg_type = String
end
input = YAML.load(open(parse_args(ARGS, s)["input"]))
pot_path = parse_args(ARGS, s)["potential"]

# Global variables
# TODO: ? assert Q == Q in pots
# Qi, Qf, NQ = input["Qi"], input["Qf"], input["NQ"]
# Q = range(Qi, stop=Qf, length=NQ)

# capture variables
input_capt = input["captures"]
V = input_capt["Volume"]
Tmin, Tmax, NT = input_capt["Tmin"], input_capt["Tmax"], input_capt["NT"]
temp = range(Tmin, stop=Tmax, length=NT)

# JLD2 has some problem with type
# pots = jldopen(pot_path, "r")
println("==============================")
println("Read potential from <$(pot_path)>")
file = open(pot_path, "r"); pots = deserialize(file); close(file)
println(keys(pots))
println("==============================")

# calculate capture coefficient
ccs = Array{conf_coord,1}()
for cc in input_capt["ccs"]
    cc_cfg = cc["cc"]
    pot_i = pots[cc_cfg["initial"]]
    pot_f = pots[cc_cfg["final"]]
    cc = cc_from_dict(pot_i, pot_f, cc_cfg)
    calc_overlap!(cc)
    calc_capt_coeff!(cc, V, temp)
    append!(ccs, [cc])
end

# plot
plot_cfg = get(input, "plot", Dict())
plot_ccs(ccs, plot_cfg)

# write capture coefficient into cvs files
for (i, cc) in enumerate(ccs)
    CSV.write("capt_coeff_$(i).csv", DataFrame([cc.temp, cc.capt_coeff], [:T, :C]))
end


end # module
